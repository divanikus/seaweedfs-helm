{{- $createBuckets := (coalesce (ternary .Values.s3.createBuckets "" .Values.s3.enabled) (ternary .Values.filer.s3.createBuckets "" (and .Values.filer.enabled .Values.filer.s3.enabled)) (ternary .Values.server.s3.createBuckets "" (and .Values.server.enabled .Values.server.s3.enabled)) | default dict) }}
{{- if or $createBuckets .Values.iam.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Release.Name }}-bucket-hook"
  labels:
    {{- include "seaweedfs.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "seaweedfs.labels" . | nindent 8 }}
    spec:
      {{- include "seaweedfs.imagePullSecrets" . | nindent 6 }}
      restartPolicy: Never
      {{- if .Values.filer.podSecurityContext.enabled }}
      securityContext: {{- omit (ternary .Values.server.podSecurityContext .Values.master.podSecurityContext .Values.server.enabled) . "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
      - name: post-install-job
        image: {{ template "common.image" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          {{- if .Values.iam.enabled }}
          - name: ADMIN_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ template "seaweedfs.name" . }}-iam
                key: admin-username
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "seaweedfs.name" . }}-iam
                key: admin-password
          {{- end }}
          {{- if .Values.extraEnvVars }}
          {{- range $key, $value := .Values.extraEnvVars }}
          - name: {{ $key }}
          {{- if kindIs "string" $value }}
            value: {{ $value | quote }}
          {{- else }}
            valueFrom:
              {{ toYaml $value | nindent 14 | trim }}
          {{- end -}}
          {{- end }}
          {{- end }}
        command:
          - "/bin/sh"
          - "-ec"
          - |
            wait_for_service() {
              local url=$1
              local max_attempts=60  # 5 minutes total (5s * 60)
              local attempt=1

              echo "Waiting for service at $url..."
              while [ $attempt -le $max_attempts ]; do
                if wget -q --spider "$url" >/dev/null 2>&1; then
                  echo "Service at $url is up!"
                  return 0
                fi
                echo "Attempt $attempt: Service not ready yet, retrying in 5s..."
                sleep 5
                attempt=$((attempt + 1))
              done
              echo "Service at $url failed to become ready within 5 minutes"
              exit 1
            }
            wait_for_service "http://{{ include "master.svc" $ }}/cluster/status"
            wait_for_service "http://{{ include "filer.svc" $ }}"
          {{- range $idx, $name := $createBuckets }}
            exec /bin/echo \
            "s3.bucket.create --name {{ $name.name }}" |\
            /usr/bin/weed shell \
            {{- if or ($.Values.master.enabled) ($.Values.server.enabled) }}
            -master={{ include "master.peers" $ }}
            {{- else }}

            {{- end }}
          {{- if $name.ttl }}
            exec /bin/echo \
            "fs.configure -locationPrefix=/buckets/{{ $name.name }} -ttl={{ $name.ttl }} -apply" |\
            /usr/bin/weed shell \
            {{- if or ($.Values.master.enabled) ($.Values.server.enabled) }}
            -master={{ include "master.peers" $ }}
            {{- else }}

            {{- end }}
          {{- end }}
          {{- end }}
          {{- if .Values.iam.enabled }}
            exec /bin/echo \
            "s3.configure -apply -user $ADMIN_USERNAME -access_key $ADMIN_USERNAME -secret_key $ADMIN_PASSWORD -actions Admin" |\
            /usr/bin/weed shell \
            {{- if or ($.Values.master.enabled) ($.Values.server.enabled) }}
            -master={{ include "master.peers" $ }}
            {{- else }}

            {{- end }}
          {{- end }}
        {{- if .Values.security.enabled }}
        volumeMounts:
        - name: security-config
          readOnly: true
          mountPath: /etc/seaweedfs/security.toml
          subPath: security.toml
        {{- if .Values.security.tls.enabled }}
        - name: ca-cert
          readOnly: true
          mountPath: /usr/local/share/ca-certificates/ca/
        - name: master-cert
          readOnly: true
          mountPath: /usr/local/share/ca-certificates/master/
        - name: volume-cert
          readOnly: true
          mountPath: /usr/local/share/ca-certificates/volume/
        - name: filer-cert
          readOnly: true
          mountPath: /usr/local/share/ca-certificates/filer/
        - name: client-cert
          readOnly: true
          mountPath: /usr/local/share/ca-certificates/client/
        {{- end }}
        {{- end }}
        {{- $containerSecurityContext := (ternary .Values.server.containerSecurityContext .Values.master.containerSecurityContext .Values.server.enabled) }}
        {{- if $containerSecurityContext.enabled }}
        securityContext: {{- omit $containerSecurityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
      {{- if .Values.security.enabled }}
      volumes:
      - name: security-config
        secret:
          secretName: {{ template "seaweedfs.name" . }}-security-config
      {{- if .Values.security.tls.enabled }}
      - name: ca-cert
        secret:
          secretName: {{ template "seaweedfs.name" . }}-ca-cert
      - name: master-cert
        secret:
          secretName: {{ template "seaweedfs.name" . }}-master-cert
      - name: volume-cert
        secret:
          secretName: {{ template "seaweedfs.name" . }}-volume-cert
      - name: filer-cert
        secret:
          secretName: {{ template "seaweedfs.name" . }}-filer-cert
      - name: client-cert
        secret:
          secretName: {{ template "seaweedfs.name" . }}-client-cert
      {{- end }}
      {{- end }}
{{- end }}
